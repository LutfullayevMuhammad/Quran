package com.lutfullayevmuhammad.quran.ui.detailsimport android.util.Logimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.lutfullayevmuhammad.quran.core.helper.ResultWrapperimport com.lutfullayevmuhammad.quran.core.models.error.UniversalErrorimport com.lutfullayevmuhammad.quran.core.models.sura.SuraResponseimport com.lutfullayevmuhammad.quran.core.models.suraDetails.SuraDetailsResponseimport com.lutfullayevmuhammad.quran.core.models.suraDetailsAudios.SuraDetailsAudioResponseimport com.lutfullayevmuhammad.quran.core.models.suraDetailsTranslations.SuraDetailsTranslationsResponseimport com.lutfullayevmuhammad.quran.core.repo.HomeRepoimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport javax.inject.Injectclass DetailsViewModel @Inject constructor(    var repo: HomeRepo) : ViewModel() {    val detailsLiveData = MutableLiveData<SuraDetailsResponse>()    val detailsTranslationsLiveData = MutableLiveData<SuraDetailsTranslationsResponse>()//    val detailsAudioLiveData = MutableLiveData<SuraDetailsAudioResponse>()    val detailsDescLiveData = MutableLiveData<SuraResponse>()    val errorLiveData = MutableLiveData<UniversalError?>()    val networkErrorLiveData = MutableLiveData<Nothing>()    fun suraDetails(chapterNumber: String) {        CoroutineScope(Dispatchers.IO).launch {            val response = repo.suraDetailsData(chapterNumber)            when (response) {                is ResultWrapper.Success -> {                    detailsLiveData.postValue(response.response!!)                }                is ResultWrapper.ErrorResponse -> {                    errorLiveData.postValue(response.errorResponse)                }                is ResultWrapper.NetworkError -> {                    networkErrorLiveData.postValue(null)                }            }        }    }    fun suraDetailsTranslations(chapterNumber: String) {        CoroutineScope(Dispatchers.IO).launch {            val response = repo.suraDetailsTranslationsData(chapterNumber)            when (response) {                is ResultWrapper.Success -> {                    detailsTranslationsLiveData.postValue(response.response!!)                }                is ResultWrapper.ErrorResponse -> {                    errorLiveData.postValue(response.errorResponse)                }                is ResultWrapper.NetworkError -> {                    networkErrorLiveData.postValue(null)                }            }        }    }    fun suraDetailsDesc(q: String) {        CoroutineScope(Dispatchers.IO).launch {            val response = repo.suraData(q)            when (response) {                is ResultWrapper.Success -> {                    detailsDescLiveData.postValue(response.response)                }                is ResultWrapper.ErrorResponse -> {                    errorLiveData.postValue(response.errorResponse)                }                is ResultWrapper.NetworkError -> {                    networkErrorLiveData.postValue(null)                }            }        }    }//    fun suraDetailsAudio(chapterNumber: String, page: String) {//        CoroutineScope(Dispatchers.IO).launch {//            val response = repo.suraDetailsAudiosData(chapterNumber, page)//            when (response) {//                is ResultWrapper.Success -> {//                    detailsAudioLiveData.postValue(response.response!!)//                }//                is ResultWrapper.ErrorResponse -> {//                    errorLiveData.postValue(response.errorResponse)//                }//                is ResultWrapper.NetworkError -> {//                    networkErrorLiveData.postValue(null)//                }//            }//        }//    }    override fun onCleared() {        Log.d("MainViewModelTAG", "onCleared: ")        super.onCleared()    }}